DisTab=table(DiversityData$Location,DiversityData$Species)
DisTab
SpeciesPool=
ddply(
DiversityData,                                  #The data frame
.(Location,Time),                               #The factors to split the data frame into
summarize,                                      #no idea
"A"= sum(Species=="A"),           #The function to apply to each section
"B"= sum(Species=="B"),
"C"= sum(Species=="C"),
"D"= sum(Species=="D"),
"E"= sum(Species=="E"),
"F"= sum(Species=="F"),
"G"= sum(Species=="G"),
"H"= sum(Species=="H"),
"I"= sum(Species=="I"),
"J"= sum(Species=="J"),
"K"= sum(Species=="K")
)
require(plyr)
SpeciesPool=
ddply(
DiversityData,                                  #The data frame
.(Location,Time),                               #The factors to split the data frame into
summarize,                                      #no idea
"A"= sum(Species=="A"),           #The function to apply to each section
"B"= sum(Species=="B"),
"C"= sum(Species=="C"),
"D"= sum(Species=="D"),
"E"= sum(Species=="E"),
"F"= sum(Species=="F"),
"G"= sum(Species=="G"),
"H"= sum(Species=="H"),
"I"= sum(Species=="I"),
"J"= sum(Species=="J"),
"K"= sum(Species=="K")
)
View(SpecPool)
View(SpeciesPool)
?specaccum
??specaccum
require(vegan)
?vegan
require(dplyr)
DiversityData <- read.csv(file.choose())
View(DiversityData)
DisTab <- table(DiversityData$Location, DiversityData$Species)
View(DisTab)
DisTab2 <- table(DiversityData$Species)
DisTab2 <- data.frame(table(DiversityData$Species))
View(DisTab2)
View(DisTab)
DisTab <- table(DiversityData$Species, DiversityData$Location)
View(DisTab)
names(DisTab) <- c("Species", "Location")
head(DisTab)
DisTab <- data.frame(table(DiversityData$Species, DiversityData$Location))
View(DisTab)
DisTab
DisTab <- table(DiversityData$Species, DiversityData$Location)
DisTab
DisTab <- as.data.fame(table(DiversityData$Species, DiversityData$Location))
DisTab <- table(DiversityData$Species, DiversityData$Location)
DisTab
View(DisTab)
DisTab[,4]
SR_Location1 <- DisTab[which(DisTab[,1] > 0), 1]
SR_Location1
length(SR_Location1)
for (i in 1:5) {
FocusColumn <- DisTab[, i]
SR_Location <- FocusColumn[which(FocusColumn > 0)]
print(length(SR_Location))
}
ForLoopSR <- data.frame(Location = rep(NA, 5),
SpecRich = rep(NA, 5))
ForLoopSR
for (i in 1:5) {
FocusColumn <- DisTab[, i]
SR_Location <- FocusColumn[which(FocusColumn > 0)]
SpeciesRichness <- length(SR_Location)
Location <- i
ForLoopSR$Location[i] <- Location
ForLoopSR$SpecRich[i] <- SpeciesRichness
}
ForLoopSR
DisTab
Diversity1 <- diversity(DisTab[,1], index = "shannon")
Diversity1
Diversity1 <- diversity(DisTab[,1], index = "simpson")
Diversity1
ForLoopSR <- data.frame(Location = rep(NA, 5),
SpecRich = rep(NA, 5),
Shannon = rep(NA, 5))
for (i in 1:5) {
FocusColumn <- DisTab[, i]
SR_Location <- FocusColumn[which(FocusColumn > 0)]
SpeciesRichness <- length(SR_Location)
Location <- i
ForLoopSR$Location[i] <- Location
ForLoopSR$SpecRich[i] <- SpeciesRichness
}
for (i in 1:5) {
FocusColumn <- DisTab[, i]
Diversity1 <- diversity(FocusColumn, index = "shannon")
ForLoopSR$Shannon[i] <- Diversity1
}
ForLoopSR
DisTab
BCIndex <- vegdist(DisTab, method = "bray")
BCIndex
View(BCIndex)
View(data.frame(BCIndex))
BCIndex
BCIndex <- vegdist(t(DisTab), method = "bray")
BCIndex
DisTab
t(DisTab)
BCIndex <- vegdist(t(DisTab), method = "bray")
BCIndex
BCIndex <- vegdist(DisTab, method = "bray")
BCIndex
BCIndex <- vegdist(DisTab, method = "bray")
BCIndex
BCIndex <- vegdist(t(DisTab), method = "bray")
BCIndex
DisTab
t(DisTab)
JIndex <- vegdist(DisTab, method="jaccard")
JIndex
JIndex <- vegdist(t(DisTab), method="jaccard")
JIndex
RankProportionTot <- RankAbundanceTot/(sum(SpeciesCounts))
plot(RankProportionTot, type="l", lwd=2, col="black", xlab="Species Abundance Rank",
ylab="Proportion of Total Sample", ylim=c(0,0.5))
DisTab <- table(DiversityData$Location,DiversityData$Species)
DisTab
DisTab <- table(DiversityData$Location,DiversityData$Species)
DisTab
DisTab <- table(DiversityData$Species,DiversityData$Location)
DisTab
?table
6+716+238+200+84+52+24+132+562+104
require(vegan)
require(dplyr)
DiversityData <- read.csv(file.choose())
#2. Species Richness---------------
DisTab <- table(DiversityData$Species,DiversityData$Location)
#the table function takes the number of observations for each category
SR_Location1 <- DisTab[which(DisTab[,1] > 0), 1]
length(SR_Location1)
ForLoopSR <- data.frame(Location = rep(NA, 5),
SpecRich = rep(NA, 5),
Shannon = rep(NA, 5))
for (i in 1:5) {
FocusColumn <- DisTab[, i]
SR_Location <- FocusColumn[which(FocusColumn > 0)]
SpeciesRichness <- length(SR_Location)
Location <- i
ForLoopSR$Location[i] <- Location
ForLoopSR$SpecRich[i] <- SpeciesRichness
}
#3. Shannon/Simpson Diversity-------------
#To find diversity of a location, use diversity() and the column of the table we made
DisTab
Diversity1 <- diversity(DisTab[,1], index = "shannon")
Diversity1 <- diversity(DisTab[,1], index = "simpson")
for (i in 1:5) {
FocusColumn <- DisTab[, i]
Diversity1 <- diversity(FocusColumn, index = "shannon")
ForLoopSR$Shannon[i] <- Diversity1
}
ForLoopSR
#Dissimilarity Indices-------------------------------------------
#Bray-Curtis Index: takes into account abundances
#vegdist() this is in package "vegan"
BCIndex <- vegdist(t(DisTab), method = "bray")
BCIndex
#the "t" function transposes a matrix,
#Jaccard Index
JIndex <- vegdist(t(DisTab), method="jaccard")
JIndex
RankProportionTot <- RankAbundanceTot/(sum(SpeciesCounts))
plot(RankProportionTot, type="l", lwd=2, col="black", xlab="Species Abundance Rank",
ylab="Proportion of Total Sample", ylim=c(0,0.5))
Diversity1
ForLoopSR
DisTab
#Rank-Abundance Curves--------------------
SpeciesCounts <- DisTab[, 1]
RankAbundanceTot <- sort(SpeciesCounts, decreasing = TRUE)
RankProportionTot <- RankAbundanceTot/(sum(SpeciesCounts))
plot(RankProportionTot, type="l", lwd=2, col="black", xlab="Species Abundance Rank",
ylab="Proportion of Total Sample", ylim=c(0,0.5))
RarefactionSeq <- seq(1,nrow(DiversityData),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts,RarefactionSeq)
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
RarefactionSeq
DiversityData
RarefactionSeq
RarefactionSeq <- seq(1,nrow(DisTab),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts,RarefactionSeq)
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
DisTab
specpool(DisTab, smallsample=TRUE)
DisTab
DisTab <- table(DiversityData$Location, DiversityData$Species)
RarefactionSeq <- seq(1,nrow(DisTab),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts,RarefactionSeq)
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
specpool(DisTab, smallsample=TRUE)          #Small sample size? Def
specpool(SpeciesPool, smallsample=TRUE)     #Small sample size? Def
DisTab
specpool(DisTab[1,], smallsample=TRUE)          #Small sample size? Def
?specpool
data("dune")
dune
require(vegan)
require(dplyr)
DiversityData <- read.csv(file.choose())
?vegan
DisTab <- table(DiversityData$Location, DiversityData$Species)
DisTab
SR_Location1 <- DisTab[which(DisTab[,1] > 0), 1]
length(SR_Location1)
ForLoopSR <- data.frame(Location = rep(NA, 5),
SpecRich = rep(NA, 5),
Shannon = rep(NA, 5))
for (i in 1:5) {
FocusColumn <- DisTab[, i]
SR_Location <- FocusColumn[which(FocusColumn > 0)]
SpeciesRichness <- length(SR_Location)
Location <- i
ForLoopSR$Location[i] <- Location
ForLoopSR$SpecRich[i] <- SpeciesRichness
}
ForLoopSR
DisTab
Diversity1 <- diversity(DisTab[,1], index = "shannon")
Diversity1 <- diversity(DisTab[,1], index = "simpson")
Diversity1
Diversity1 <- diversity(DisTab[1,], index = "shannon")
Diversity1 <- diversity(DisTab[1,], index = "simpson")
Diversity1
for (i in 1:5) {
FocusColumn <- DisTab[, i]
Diversity1 <- diversity(FocusColumn, index = "shannon")
ForLoopSR$Shannon[i] <- Diversity1
}
ForLoopSR
BCIndex <- vegdist(DisTab, method = "bray")
BCIndex
JIndex <- vegdist(DisTab, method="jaccard")
JIndex
DisTab
SpeciesCounts_1 <- DisTab[1, ]
SpeciesCounts_1
#To Sort data frames and vectors, use the "sort" function
RankAbundanceTot <- sort(SpeciesCounts, decreasing = TRUE)
RankAbundanceTot
RankProportionTot <- RankAbundanceTot / (sum(SpeciesCounts_1))
RankProportionTot
plot(RankProportionTot, type="l", lwd=2, col="black", xlab="Species Abundance Rank",
ylab="Proportion of Total Sample", ylim=c(0,0.5))
RankAbundanceTot <- sort(SpeciesCounts_1, decreasing = TRUE)
RankProportionTot <- RankAbundanceTot / (sum(SpeciesCounts_1))
plot(RankProportionTot, type = "l", lwd = 2, col = "black", xlab = "Species Abundance Rank",
ylab = "Proportion of Total Sample", ylim = c(0,0.5))
SpeciesCounts_2 <- DisTab[2, ]
DisTab
#To Sort data frames and vectors, use the "sort" function
RankAbundanceTot2 <- sort(SpeciesCounts_2, decreasing = TRUE)
RankProportionTot2 <- RankAbundanceTot2 / (sum(SpeciesCounts_2))
RankProportionTot2
lines(RankProportionTot2, type = "l", lwd = 2, col = "purple", add=T)
RarefactionSeq <- seq(1,nrow(DisTab),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts,RarefactionSeq)
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
RarefactionSeq <- seq(1,nrow(SpeciesCounts_2),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts_2,RarefactionSeq)
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
RarefactionSeq <- seq(1,nrow(SpeciesCounts_2),1)
nrow(SpeciesCounts_2)
RarefactionSeq <- seq(1,length(SpeciesCounts_2),1)
RarefactionSeq
RareCounts <- rarefy(SpeciesCounts_2,RarefactionSeq)
RareCounts
RareCurve <- c(RareCounts[1,])
plot((RareCurve), xlab="Number of Observations", ylab="Species Richness")
DisTab
ObsSeq <- seq(from = 1, to = sum(DisTab[2, ]), by = 1)
ObsSeq
Location2 <- DiversityData[which(DiversityData$Location == 2), ]
Location2
?rarefy
rarefy(Location2$Species, sample = 2)
rarefy(DistTab[2,], sample = 2)
rarefy(DisTab[2,], sample = 2)
rarefy(DisTab[2,], sample = 45)
DistTab[2,]
DisTab[2,]
rarefy(DisTab[2,], sample = 45)
rarefy(DisTab[2,], sample = ObsSeq)
Location2_Rarefy <- rarefy(DisTab[2,], sample = ObsSeq)
plot(Location2_Rarefy)
str(Location2_Rarefy)
Location2_Rarefy[[1]]
Location2_Rarefy
plot(Location2_Rarefy[1,])
#Estimating Species Richness--------------
?specpool
specpool(DisTab[2,], smallsample = TRUE)
DisTab[2,]
specpool(DisTab[,2], smallsample = TRUE)
data(dune)
dune
data(dune)
data(dune.env)
pool <- with(dune.env, specpool(dune, Management))
pool
op <- par(mfrow=c(1,2))
boxplot(specnumber(dune) ~ Management, data = dune.env,
col = "hotpink", border = "cyan3")
boxplot(specnumber(dune)/specpool2vect(pool) ~ Management,
data = dune.env, col = "hotpink", border = "cyan3")
par(op)
data(BCI)
## Accumulation model
pool <- poolaccum(BCI)
summary(pool, display = "chao")
plot(pool)
install.packages("sdmpredictors")
?sdmpredictors
require(sdmpredictors)
?sdmpredictors
list_layers("Bio-ORACLE")
X <- rnorm(10, mean = 0, sd = 0.7)
XMax <- rnorm(10, mean = 10, sd = 1)
Xmin <- rnorm(10, mean = -10, sd = 1)
Y <- 3*X + rnorm(1, mean=0, sd=3)
plot(Y~X)
Y <- 3*X + rnorm(1, mean=0, sd=30)
plot(Y~X)
X
rnorm(1, mean=0, sd=30)
Y <- 3*X + rnorm(10, mean=0, sd=30)
plot(Y~X)
Y <- 3*X + rnorm(10, mean=0, sd=3)
plot(Y~X)
Y <- 3*X + rnorm(10, mean=0, sd=1)
plot(Y~X)
arrows(x0=XMin, y0=Y, x1=XMan, y1=Y, length=0.25)
Xmin <- rnorm(10, mean = -10, sd = 1)
arrows(x0=XMin, y0=Y, x1=XMan, y1=Y, length=0.25)
XMin <- rnorm(10, mean = -10, sd = 1)
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.25)
plot(Y~X, xlim=c(-20,20))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.25)
X <- rnorm(10, mean = 0, sd = 0.7)
XMax <- rnorm(10, mean = 5, sd = 1)
XMin <- rnorm(10, mean = -5, sd = 1)
Y <- 3*X + rnorm(10, mean=0, sd=1)
plot(Y~X, xlim=c(-20,20))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.25)
plot(Y~X, xlim=c(-10,10))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.25)
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.5)
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.01)
plot(Y~X, xlim=c(-10,10))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.01)
X <- rnorm(10, mean = 0, sd = 0.7)
XMax <- rnorm(10, mean = 5, sd = 1)
XMin <- X-XMax
Y <- 3*X + rnorm(10, mean=0, sd=1)
plot(Y~X, xlim=c(-10,10))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.01)
X <- rnorm(10, mean = 0, sd = 2)
XMax <- rnorm(10, mean = 5, sd = 1)
XMin <- X-XMax
Y <- 3*X + rnorm(10, mean=0, sd=1)
plot(Y~X, xlim=c(-10,10))
arrows(x0=XMin, y0=Y, x1=XMax, y1=Y, length=0.01)
AllLocalities <- read.csv(file.choose())
AllLocalities <- read.csv(file.choose())
AllLocations
AllLocalities
plot(AllLocalities$AgeMean, AllLocalities$AP)
plot(AllLocalities$AgeMean, AllLocalities$AP, xlim = (40,0))
plot(AllLocalities$AgeMean, AllLocalities$AP, xlim = c(40,0))
plot(AllLocalities$AgeMean, AllLocalities$AP, xlim = c(50,0))
arrows(x0=AllLocalities$AgeMin, y0=AllLocalities$AP, x1=AllLocalities$AgeMax, y1=AllLocalities$AP)
arrows(x0=AllLocalities$AgeMin,
y0=AllLocalities$AP,
x1=AllLocalities$AgeMax,
y1=AllLocalities$AP,
length=0)
plot(AllLocalities$AgeMean, AllLocalities$AP, xlim = c(50,0))
arrows(x0=AllLocalities$AgeMin,
y0=AllLocalities$AP,
x1=AllLocalities$AgeMax,
y1=AllLocalities$AP,
length=0)
arrows(x0=AllLocalities$AgeMean,
y0=AllLocalities$AP-100,
x1=AllLocalities$AgeMean,
y1=AllLocalities$AP+100,
length=0)
install.packages("Rcapture")
install.packages("Rcapture")
install.packages("RCApture")
install.packages("Rcptre")
install.packages("C:/Users/bshipley6/Downloads/multimark_2.1.2.tar.gz", repos = NULL, type = "source")
data(HIV)
require(Rcapture)
data(HIV)
View9HIV
View(HIV)
require(raster)
require(dplyr)
?legend
devtools::install_github("elizagrames/litsearchr")
library(praise)
#Documentation
library(devtools)
library(roxygen2)
#Setting the working directory where the package folders will be created
setwd("C:/Users/bshipley6/Desktop")
#Creating the r package folders
devtools::create("megaSDM")
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
library(megaSDM)
?megaSDM::additionalStats
?megaSDM::BackgroundBuffers
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
install("megaSDM")
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
#installing to check man pages
setwd("C:/Users/bshipley6/Desktop")
install("megaSDM")
library(megaSDM)
?megaSDM::additionalStats
?megaSDM::BackgroundPoints
?megaSDM::BackgroundBuffers
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
#installing to check man pages
setwd("C:/Users/bshipley6/Desktop")
install("megaSDM")
library(megaSDM)
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
#installing to check man pages
setwd("C:/Users/bshipley6/Desktop")
install("megaSDM")
library(megaSDM)
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
#installing to check man pages
setwd("C:/Users/bshipley6/Desktop")
install("megaSDM")
library(megaSDM)
?megaSDM::BackgroundBuffers
library(devtools)
library(roxygen2)
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
?megaSDM::BackgroundBuffers
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
library(megaSDM)
?megaSDM::additionalStats
?megaSDM::BackgroundBuffers
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
library(megaSDM)
document()
library(megaSDM)
?megaSDM::BackgroundBuffers
?megaSDM::BackgroundPoints
?megaSDM::createTimeMaps
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
setwd("C:/Users/bshipley6/Desktop/EXAMPLE")
install("megaSDM")
megaSDM::additionalStats()
megaSDM::additionalStats
?megaSDM::additionalStats
setwd("C:/Users/bshipley6/Desktop/EXAMPLE/megaSDM")
document()
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
library(devtools)
library(roxygen2)
setwd("C:/Users/bshipley6/Desktop/megaSDM")
document()
#installing to check man pages
setwd("C:/Users/bshipley6/Desktop/")
install("megaSDM")
library(megaSDM)
?megaSDM::MaxEntModel
