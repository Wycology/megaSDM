Combined <- t1 + t2
Combined[Combined != 2] <- 0
Combined[Combined == 2] <- 1
return(Combined)
}
getCentroid <- function(CentRaster) {
#A matrix with three columns: x, y, and v (value)
points <- raster::rasterToPoints(CentRaster, fun = function(x){x == 1}, spatial = FALSE)
#average latitude (y)
Clat <- mean(points[, 2], na.rm = TRUE)
#average longitude (x)
Clong <- mean(points[, 1], na.rm = TRUE)
#returns the longitude & latitude of the Centroid
return(c(Clong, Clat))
}
getStats <- function(cur, j, decade, binary, stats, modern.size, modern.binary) {
#Adds all of the variables into the stats data frame
stats$Projection[j] <- cur
stats$NumberCells[j] <- getSize(binary)
stats$CellChange[j] <- getSize(binary) - modern.size
t1nott2_raster <- t1nott2(modern.binary, binary)
t2nott1_raster <- t1nott2(binary, modern.binary)
stats$T1notT2[j] <- getSize(t1nott2_raster)
stats$T2notT1[j] <- getSize(t2nott1_raster)
overlap_raster <- overlap(modern.binary, binary)
stats$Overlap[j] <- getSize(overlap_raster)
binary.centroid <- getCentroid(binary)
stats$CentroidX[j] <- binary.centroid[1]
stats$CentroidY[j] <- binary.centroid[2]
return(stats)
}
run <- function(CurSpp) {
spp.name <- CurSpp
setwd(output)
if(!dir.exists(spp.name)) {
dir.create(spp.name)
}
#Creates a stats table to be filled in & passed to next scripts
stats <- as.data.frame(cbind(Projection = rep(0, times = nproj),
NumberCells = rep(0, times = nproj),
CellChange = rep(0, times = nproj),
T1notT2 = rep(0, times = nproj),
T2notT1 = rep(0, nproj),
Overlap = rep(0, times = nproj),
CentroidX = rep(0, times = nproj),
CentroidY = rep(0, times = nproj)))
#Gets modern data stats first to use for comparison
dir.create(paste0(output, "/", spp.name, "/projections"))
dir.create(paste0(output, "/", spp.name, "/projections/", time_periods[1]))
for (g in 1:nrep) {
#If there is more than 1 replicate, the lambdas file is named differently
if (nrep == 1) {
LambdaFile <- paste0(input, "/", spp.name, "/", spp.name, ".lambdas")
} else {
LambdaFile <- paste0(input, "/", spp.name, "/", spp.name, "_", g-1, ".lambdas")
}
#THIS IS THE PROJECTIONS COMMAND>>
setwd(input)
system(paste0("java -mx900m -cp maxent.jar density.Project ",
# location of lambdas file
LambdaFile, " ",
#location of folder with map rasters
study_dir, " ",
# where to output files (Run#)
output, "/", spp.name, "/projections/", time_periods[1], "/RUN_", g-1,
" noaskoverwrite nowarnings -a"))
}
modern.rasters <- c()
r <- list.files(path = paste0(output, "/", spp.name, "/projections/", time_periods[1]),
pattern = paste0(".asc$"),
full.names = TRUE)
for (k in 1:length(r)) {
if (!grepl("clamping", r[k])) {
modern.rasters <- c(modern.rasters, r[k])
}
}
modern.rasters <- gtools::mixedsort(modern.rasters)
#Runs "threshold" function, which creates and ensembles binary maps
modern.binary <- threshold(spp.name, modern.rasters, nrep, "", currentYear)
gc()
if (length(modern.binary) > 0) {
#Runs medianensemble function, which ensembles maps using a median function
modern.median <- medianensemble(spp.name, modern.rasters, nrep, "", currentYear)
gc()
statsrow <- 1
#Fills in the stats row for the modern species
stats$Projection[statsrow] <- currentYear
modern.size <- getSize(modern.binary)
stats$NumberCells[statsrow] <- modern.size
modern.centroid <- getCentroid(modern.binary)
stats$CentroidX[statsrow] <- modern.centroid[1]
stats$CentroidY[statsrow] <- modern.centroid[2]
#Generates projections for hindcasted/forecasted climate layers
if (numScenario > 0) {
setwd(output)
for (ScenIndex in 1:numScenario) {
dir.create(paste0(spp.name, "/projections/", scenarios[ScenIndex]))
for (YearIndex in 2:numYear) {
dir.create(paste0(spp.name, "/projections/", scenarios[ScenIndex], "/", time_periods[YearIndex]))
}
}
for (ScenIndex in 1:numScenario) {
focusScen <- scenarios[ScenIndex]
for (YearIndex in 2:numYear) {
statsrow <- statsrow + 1
focusDate <- time_periods[YearIndex]
rasterLocation <- predict_dirs[[ScenIndex]][YearIndex - 1]
for (g in 1:nrep) {
#If there is more than 1 replicate, the lambdas file is named differently
if (nrep == 1) {
LambdaFile <- paste0(input, "/", spp.name, "/", spp.name, ".lambdas")
} else {
LambdaFile <- paste0(input, "/", spp.name, "/", spp.name, "_", g-1, ".lambdas")
}
#THIS IS THE PROJECTIONS COMMAND>>
setwd(input)
system(paste0("java -mx900m -cp maxent.jar density.Project ",
# location of lambdas file
LambdaFile, " ",
#location of folder with map rasters
rasterLocation, " ",
# where to output files (Run#)
output, "/", spp.name, "/projections/", focusScen, "/",
focusDate, "/RUN_", g-1,
" noaskoverwrite nowarnings -a"))
}
#Makes a list of the projections files to use for threshold/ensemble functions
setwd(input)
cur.rasters <- list.files(path = paste0(output, "/", spp.name, "/projections/",
focusScen, "/", focusDate),
pattern = paste0('\\.asc$'),
full.names = TRUE)
cur.proj <- c()
for (k in 1:length(cur.rasters)) {
if (!grepl("clamping", cur.rasters[k])) {
cur.proj <- c(cur.proj, cur.rasters[k])
}
}
length(cur.proj)
#Thresholds & gets medians of the projected rasters
cur.binary <- threshold(spp.name, cur.proj, nrep, focusScen, focusDate)
gc()
cur.median <- medianensemble(spp.name, cur.proj, nrep, focusScen, focusDate)
gc()
#Fills in the stats table for the projected rasters
stats <- getStats(paste0(focusScen, "_", focusDate), statsrow, futdate, cur.binary,
stats, modern.size, modern.binary)
gc()
}
}
}
setwd(paste0(output, "/", spp.name))
#Writes the stats table to be used later
write.csv(stats, file = "Results.csv")
} else {
message(paste0("Removing ", spp.name, " from further analysis"))
}
}
for (i in 1:nrow(ListSpp)) {
CurSpp <- ListSpp[i]
run(CurSpp)
gc()
}
}
rm(MaxEntProj2)
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
document()
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
# Other options are also available (check the documentation page)
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
ensemble.calc
document()
setwd("F:/")
install("megaSDM")
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
ensemble.calc@file
ensemble.calc@data
plot(ensemble.calc)
TestRast <- raster(file.choose())
View(TestRast)
plot(TestRast)
plot(c(3,4), c(4,5))
?plot
raster::plot(TestRast)
plot(c(3,4))
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
# Other options are also available (check the documentation page)
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
dev.off()
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
# Other options are also available (check the documentation page)
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
source('C:/Users/bshipley6/Dropbox (GaTech)/Bistra&Jenny/megaSDM/Manuscript_and_Code/Package_Documentation.R', echo=TRUE)
# Other options are also available (check the documentation page)
MaxEntProj2(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
# Other options are also available (check the documentation page)
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
# Other options are also available (check the documentation page)
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
# Other options are also available (check the documentation page)
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
#Documentation
library(devtools)
library(roxygen2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
# Make a list of environmental rasters that we will use to clip, resample, and reproject
# Navigate to the current environmental files within "ExampleData" (/trainingarea)
input_TA <- list.files(choose.dir(), pattern = ".bil$", full.names = TRUE)
# For this example, our training and study areas will be exactly the same, and we don't need
# to reproject or resample
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-91.5, -75, 25.5, 36),
clipStudy = c(-91.5, -75, 25.5, 36))
# By saving this as an object "TSEnv", I can save the rasters within the R environment for use later
#Set the working directory to the package folder and install
setwd("F:/")
install("megaSDM")
#Up to you whether you want to update your packages or not, I don't think it matters either way, though
library(megaSDM)
# First, define "envoutput", which is where the training and study rasters will be printed out to.
# I have it as the same location the WorkedExample is in, but it doesn't have to be
envoutput <- "F:/TestRun"
# Make a list of environmental rasters that we will use to clip, resample, and reproject
# Navigate to the current environmental files within "ExampleData" (/trainingarea)
input_TA <- list.files(choose.dir(), pattern = ".bil$", full.names = TRUE)
# Make a list of environmental rasters that we will use to clip, resample, and reproject
# Navigate to the current environmental files within "ExampleData" (/trainingarea)
input_TA <- list.files(choose.dir(), pattern = ".bil$", full.names = TRUE)
# For this example, our training and study areas will be exactly the same, and we don't need
# to reproject or resample
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-91.5, -75, 25.5, 36),
clipStudy = c(-91.5, -75, 25.5, 36))
# The extent should be the same (or similar to) as the extent of the training area.
# Given in latitude/longitude coordinates:
extent_occ <- c(-91.5, -75, 25.5,36)
# The species we want to examine: For now we'll just do two
spplist <- c("Puma concolor", "Sylvilagus palustris")
# Where we want to put the new occurrence files (if this folder doesn't already exists, megaSDM will make it)
occ_output <- "F:/TestRun/occurrences"
#This function only takes occurrences from the described trainingarea extent.
Occurrences <- OccurrenceCollection(spplist = spplist,
output = occ_output,
trainingarea = extent_occ)
# 4. Occurrence Management--------------------------
# After collecting the occurrences, we need to format them so that they are consistent and able to be read within MaxEnt
# This function takes a list of occurrence files, extracts environmental data at each point, and if necessary,
# subsamples the dataset for more accurate modelling.
# First, get the list of the occurrence files
occlist <- list.files(occ_output, pattern = ".csv", full.names = TRUE)
# If the output is set to the same place as in the previous function, it will overwrite the occurrence files
OccurrenceManagement(occlist = occlist,
output = occ_output,
envextract = TRUE,
envsample = TRUE,
nbins = 25,
envdata = TSEnv$training)
# 5. Background Buffers-----------------------------
# Spatially-constrained background poitns can be more effective for SDMs. To constrain background points,
# megaSDM uses buffers to sample points within. This function generates those buffers
# We need to get the list of occurrence files again (even if they were written out in the same folder as before)
occlist <- list.files(occ_output, pattern = ".csv", full.names = TRUE)
# Where we want the buffers to be printed out (.shp)
buff_output <- "F:/TestRun/buffers"
# Generates buffers for each species.
# ncores should be set no higher than the number of cores the computer has minus 1
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 2)
# 6. Background Points------------------------------
# This function creates the randomly generated background points and environmentally subsamples them
# (if required).
# Set the parameters for the background point generation (how many points, and how spatially-constrained)
nbg <- 1000
spatial_weights <- 0.5
# Make a list of the buffer files (generated in previous function)
bufflist <- list.files(buff_output, pattern = ".shp$", full.names = TRUE)
# Where we want the background points to be printed out (.shp)
bg_output <- "F:/TestRun/backgrounds"
BackgroundPoints(spplist = spplist,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = "Varela",
ncores = 2)
# 7. Varying Environmental Sets by Species----------
# SDMs are generally better when a species-specific set of environmental variables are used (with biological relevance)
# This function can change the set of environmental variables used for each species to tailor the analysis to the
# habitat suitability of each species.
# A list of the environmental variables to keep for each species
envvar <- c("Bio1,Bio12,Bio9", "Bio1,Bio12,Bio16,Bio6")
# A list of the background point files
bglist <- list.files(bg_output, pattern = ".csv", full.names = TRUE)
# Like before, we are overwriting the occurrence and background points,
# but they could be placed in a different folder if requested.
VariableEnv(occlist = occlist,
bglist = bglist,
env_vars = envvar,
occ_output = occ_output,
bg_output = bg_output)
# This is where the results of the MaxEnt model rusn will be printed out to (as .lambdas files)
# unlike the rest of the output folders, THIS ONE MUST BE CREATED BEFOREHAND
# It needs to have the maxent.jar file in it, so copy and paste that from its current location
model_output <- "F:/TestRun/models"
options(error=traceback)
# First, create a list of the time periods and climate scenarios used in the analysis (including the present)
time_periods <- c(2010,2050,2070)
scenarios <- c("RCP4.5", "RCP8.5")
# Define the directory where the current study area rasters are located (written out in Step 1)
study_dir <- "F:/TestRun/studyarea"
# Define the directories where the future study area rasters are location (written out in Step 2)
# This argument should be a list of directories, separated into the different climate scenarios and years:
# list(c(Scenario1Year1, Scenario1Year2), c(Scenario2Year1, Scenario2Year2))
predictdir <- list(c("F:/TestRun/RCP4.5/2050", "F:/TestRun/RCP4.5/2070"),
c("F:/TestRun/RCP8.5/2050", "F:/TestRun/RCP8.5/2070"))
# Where the results will be printed out
result_dir <- "F:/TestRun/Results"
# This function takes the generated model parameters, projects them onto current and future environments,
# removes poorer models from the analyses, creates ensemble models from the multiple replicates conducted
# in the previous step, and generates binary presence/absence distribution maps.
# Other options are also available (check the documentation page)
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
# 10. TimeMaps-
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
setwd("F:/megaSDM")
document()
#installing to check man pages
setwd("F:/")
install("megaSDM")
MaxEntProj(input = model_output,
time_periods = time_periods,
scenarios = scenarios,
study_dir = study_dir,
predict_dirs = predictdir,
output = result_dir,
aucval = 0.7,
ncores = 2)
#Creating the r package folders
devtools::create("megaSDM")
