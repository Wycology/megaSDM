}
gc()
#Samples background points from buffer (if desired) or if species-specific background points are needed
BufferFiles <- list.files(path = buff_dir, pattern = paste0(rastertype, "$|.shp$"))
if (((length(BufferFiles) > 0) | (length(grep("x", tolower(nbg))) > 0)) && (backgroundPointsStep == "Y")) {
#If buffer files exist or if the number of desired background points is species-dependent, runs this step
setwd(scripts)
print("Running backgroundPoints2.R...")
source("backgroundPoints2.R")
print(Sys.time())
} else if (backgroundPointsStep == "Y") {
#Uses background points generated in the first step
for (s in 1:length(spp_batch)) {
currentspec <- substr(spp_batch[s], 1, nchar(spp_batch[s]) - 4)
dir.create(paste0(test, "/backgrounds/", currentspec))
setwd(paste0(test, "/backgrounds/", currentspec))
for (i in 1:nsubsamp) {
Full_BGPoints <- read.csv(paste0(test,"/backgrounds/Train_Background_", i, ".csv"))
write.csv(Full_BGPoints, file = paste0(getwd(), "/", currentspec, "_background_", i, ".csv"), row.names = FALSE)
}
}
} else if (subsampleVarelaStep == "Y") {
#If background points were already generated but environmental subsampling is needed, subsample the background points
setwd(scripts)
print("Running subsampleOccur_bg.R...")
source("subsampleOccur_bg.R")
print(Sys.time())
} else {
#Uses background points provided by user
setwd(paste0(test, "/backgrounds/"))
BackgroundFiles <- list.files(path = getwd(), pattern = paste0(".csv$"), full.names = TRUE, recursive = TRUE)
#Finds and copies background point files to the correct directories
for (s in 1:length(spp_batch)) {
currentspec <- substr(spp_batch[s], 1, nchar(spp_batch[s]) - 4)
SpecIndex <- grep(currentspec, BackgroundFiles)
if (!dir.exists(paste0(test, "/backgrounds/", currentspec))) {
dir.create(paste0(test, "/backgrounds/", currentspec))
}
FocusBGFiles <- BackgroundFiles[SpecIndex]
if (length(FocusBGFiles) != nsubsamp) {
message("Warning! the number of background files does not match the requested number of subsamples")
FocusBGFiles <- rep(FocusBGFiles, len = nsubsamp)
message("Resizing files to number of subsamples")
}
setwd(paste0(test, "/backgrounds/", currentspec))
for (i in 1:nsubsamp) {
Full_BGPoints <- read.csv(paste0(FocusBGFiles[i]))
#Removes "Inf" values from background points
if (length(grep(Inf, Full_BGPoints)) > 0) {
Full_BGPoints <- Full_BGPoints[-grep(Inf, Full_BGPoints[, grep(Inf, Full_BGPoints)]),]
}
write.csv(Full_BGPoints, file = paste0(getwd(), "/", currentspec,"_background_", i, ".csv"), row.names = FALSE)
}
}
gc()
}
if (variableEnvStep == "Y") {
setwd(scripts)
print("Running variableEnvStep.R...")
source("variableEnv.R")
print(Sys.time())
}
}
#Modelling and Results------------------------------------------------
#Conducts all species distribution modelling/forecasting/hindcasting, including statistics, dispersal rate, and species richness
#Runs MaxEnt, creates SDMs and calculates statistics
for (speciesBatchIndex in 1:ncol(all_spp)) {
print(Sys.time())
spp_batch <- all_spp[, speciesBatchIndex]
df[, "ncores"] <- nrow(all_spp)
#If there are repeats due to ncores not being a factor of species number, revises the last number of cores
if (speciesBatchIndex == ncol(all_spp)){
if (length(unique(spp_total)) < df[, "ncores"]) {
df[, "ncores"] <- length(unique(spp_total))
} else {
Remainder <- (length(unique(spp_total)) %% nrow(all_spp))
if(Remainder > 0) {
spp_batch <- spp_batch[1:Remainder]
df[, "ncores"] <- length(spp_batch)
}
}
}
#Prints progress notification
print(paste0("Currently running species set ", speciesBatchIndex, " of ", ncol(all_spp), ":"))
df[, "dispersalRan"] <- "N"
for (z in 1:length(unique(spp_batch))) {
print(paste0("   ", unique(spp_batch)[z]))
}
spp_orig <- spp_batch
for (j in 1:length(spp_batch)) {
curspec <- substr(spp_batch[j], 1, nchar(spp_batch[j]) - 4)
dir.create(paste0(result_dir, "/", curspec))
}
#Creates SDMs using MaxEnt with statistics and output map displays
if (maxentStep == "Y") {
if (df[, "nrep"] == 1) {
setwd(scripts)
print("Running maxent1replicate.R...")
source("maxent1replicate.R")
} else {
setwd(scripts)
print("Running maxent2replicates.R...")
source("maxent2replicates.R")
}
}
gc()
#Copies species files from "test" to "results" once modelling is completed
copySpeciesFiles <- function(originalSpp) {
setwd(test)
newspp <- originalSpp
for (b in 1:length(newspp)) {
newspp[b] <- substr(newspp[b], 1, (nchar(newspp[b]) - 4))
}
#Iterates through each species batch analysed
for (j in 1:length(newspp)) {
spp.name <- newspp[j]
#Creates directories in %result_dir%
print(paste0("Copying results for species ", gsub("_", " ", spp.name), " into:"))
print(paste0(" ", result_dir, "/", spp.name))
dir.create(paste0(result_dir, "/", spp.name, "/lambdas"))
dir.create(paste0(result_dir, "/", spp.name, "/samples"))
dir.create(paste0(result_dir, "/", spp.name, "/backgrounds"))
dir.create(paste0(result_dir, "/", spp.name, "/logs"))
dir.create(paste0(result_dir, "/", spp.name, "/outputs"))
if (numScenario > 0) {
dir.create(paste0(result_dir, "/", spp.name, "/projections"))
}
fol <- list.files(path = paste0(test, "/outputs/", spp.name), full.names = TRUE)
allresults <- c()
#Copies the lambda files and the MaxEnt logs into result_dir
for (f in 1:length(fol)) {
directory = paste0("outputs/", spp.name, "/RUN_", f)
if (alloutputs == "Y") {
lambdas = list.files(path = directory, pattern = "\\.lambdas", full.names = TRUE)
logs = list.files(path = directory, pattern = "\\.log", full.names = TRUE)
if (length(lambdas) > 0) {
for (k in 1:length(lambdas)) {
file.rename(from = lambdas[k], to = paste0(result_dir, "/", spp.name, "/lambdas/RUN_", f, ".lambdas"))
file.rename(from = logs[k], to = paste0(result_dir, "/", spp.name, "/logs/RUN_", f, ".log"))
}
}
}
res <- paste0(directory, "/maxentResults.csv")
allresults <- c(res, allresults)
}
#Creates maxentResults.csv in result_dir
r <- c()
for (f in 1:length(fol)) {
r <- rbind(r, read.csv(allresults[f]))
}
write.csv(r, paste0(result_dir, "/", spp.name, "/maxentResults.csv"))
#Copies samples, backgrounds, specific outputs, and speciic projection files (if desired)
if (AllOutputs == "Y") {
samples.csv = list.files(path = paste0(test, "/samples/", spp.name), full.names=TRUE)
for (f in 1:length(samples.csv)) {
file.copy(from = samples.csv[f],
to = paste0(result_dir, "/", spp.name, "/samples"),
overwrite = TRUE,
recursive = TRUE)
}
bg.csv = list.files(path = paste0(test, "/backgrounds/", spp.name), full.names = TRUE)
for (f in 1:length(bg.csv)) {
file.copy(from = bg.csv[f],
to = paste0(result_dir, "/", spp.name, "/backgrounds"),
overwrite = TRUE,
recursive = TRUE)
}
}
#If all outputs are requested, copies secondary outputs
if (AllOutputs == "Y"){
file.copy(from = paste0(test, "/outputs/", spp.name),
to = paste0(result_dir, "/", spp.name, "/outputs"),
overwrite = TRUE, recursive = TRUE)
if (dir.exists(paste0(test, "/projections/", spp.name))) {
if (numScenario > 0) {
file.copy(from = paste0(test, "/projections/", spp.name),
to = paste0(result_dir, "/", spp.name, "/projections"),
overwrite = TRUE, recursive = TRUE)
}
}
}
#Deletes the copied (or not) folders from the test directory
unlink(paste0(test, "/outputs/", spp.name), recursive = TRUE)
if (backgroundPointsStep == "Y") {
unlink(paste0(test, "/backgrounds/", spp.name), recursive = TRUE)
}
if (subsampleVarelaStep == "Y") {
unlink(paste0(test, "/samples/", spp.name), recursive = TRUE)
}
if (numScenario > 0) {
unlink(paste0(test, "/projections/", spp.name), recursive = TRUE)
}
}
#If this run is the final species batch
if (speciesBatchIndex == ncol(all_spp)){
#Reads in the Taxon-Species list
specieslist <- read.csv(df[,"spplist"])
speciesfolders <- list.dirs(path = result_dir, recursive = FALSE)
speciesfolders <- speciesfolders[grep("_", speciesfolders)]
#Makes a list of all species that have folders
sppfold <- c()
for (i in 1:length(speciesfolders)){
if (length(list.files(speciesfolders[i]) > 0)) {
sppfold <- c(sppfold,speciesfolders[i])
}
}
sppfoldlist <- c()
for (i in 1:length(sppfold)) {
foldsplit <- unlist(strsplit(sppfold[i], "/"))
sppfoldlist <- c(sppfoldlist, foldsplit[length(foldsplit)])
sppfoldlist[i] <- gsub("_", " ", sppfoldlist[i])
}
SppFold <- data.frame(Species = sppfoldlist)
#Merges the two lists
taxonlist <- merge(specieslist, SppFold, by.x = c(colnames(specieslist)[2]), by.y = "Species", all.y = TRUE)
colnames(taxonlist)[1] <- "Species"
taxonlist$Species <- as.character(taxonlist$Species)
#Finds and removes species with AUC Values less than desired threshold
DeleteSP <- c()
for (sp in 1:nrow(taxonlist)) {
focusspp <- gsub(" ", "_", taxonlist[sp, 1])
setwd(paste0(result_dir, "/", focusspp))
curfocus <- list.files(path = getwd(), pattern = paste0("binary", rastertype, "$"))
if (!length(curfocus) > 0) {
message(paste0(focusspp, " will be removed (no replicates with an AUC > ", aucval, ")"))
DeleteSP <- c(DeleteSP, sp)
}
}
if (length(DeleteSP) > 0) {
AnalysedSppList <- taxonlist[-DeleteSP,]
} else {
AnalysedSppList <- taxonlist
}
write.csv(AnalysedSppList, paste0(result_dir, "/AnalysedSpecies.csv"), row.names = FALSE)
print(paste0(" Writing CSV file of fully analysed species to: ", result_dir,"/AnalysedSpecies.csv"))
}
}
#If there are no species with AUC values above threshold, immediately copies files
if (length(unique(spp_batch)) == 0) {
copySpeciesFiles(spp_orig)
next
} else if (length(unique(spp_batch)) < df[, "ncores"]) {
df[, "ncores"] <- length(unique(spp_batch))
}
print(Sys.time())
#Conducts additional species distribution/range shift statistics
setwd(scripts)
print("Running additionalStats.R...")
source("additionalStats.R")
print(Sys.time())
#Creates maps that show intermediate range dynamics
if (numScenario > 0) {
setwd(scripts)
print("Running createTimeMaps.R...")
source("createTimeMaps.R")
print(Sys.time())
}
gc()
#Incorporates dispersal rate into projected species distributions
if (numScenario == 0) {
dispersalStep == "N"
}
#Calculates dispersal probabilities and re-runs statistics and time maps
if (dispersalStep == "Y") {
setwd(scripts)
print("Running dispersalRate.R...")
source("dispersalRate.R")
setwd(scripts)
print("Running additionalStats.R...")
source("additionalStats.R")
setwd(scripts)
print("Running createTimeMaps.R...")
source("createTimeMaps.R")
print(Sys.time())
}
gc()
#Creates PDFs of output maps and graphs
setwd(scripts)
print("Running resultsToPDF.R...")
source("resultsToPDF.R")
alloutputs <- df[, "AllOutputs"]
#Moves all files in "test" to "results" directories, clears test directory
copySpeciesFiles(unique(spp_orig))
print(Sys.time())
rm(spp_batch)
gc()
}
#Resets number of cores
df[,"ncores"] <- nrow(all_spp)
#Creates Rasters and PDF Maps of Species Richness
if (RichnessStep == "Y") {
setwd(scripts)
source("createRichnessMaps.R")
}
}
{
#Set the working directory by navigating to and clicking on this file (or any other script file in the same directory)
setwd(dirname(file.choose()))
#If directory does not have "format.R" in it, print an error
if (length(grep("format.R", list.files(getwd()))) == 0) {
stop("File 'format.R' not found in the selected location. Rerun, ensuring that the selected file is within the scripts folder")
}
#Reads and formats the "config.txt" file (creates "df" dataframe)
source("format.R")
#Loads the necessary variables from "df"
scripts <- df[, "scripts"]
test <- df[, "test"]
occurrences <- df[, "occurrences"]
result_dir <- df[, "result_dir"]
#Loads variables for Y/N steps
ClipEnvDataStep <- df[, "ClipEnvDataStep"]
CoordinateProjectionStep <- df[, "CoordinateProjectionStep"]
gbifstep <- df[, "gbifstep"]
OccurEnvFeaturesStep <- df[, "OccurEnvFeaturesStep"]
subsampleVarelaStep <- df[, "subsampleVarelaStep"]
speciesBufferStep <- df[, "speciesBufferStep"]
backgroundPointsStep <- df[, "backgroundPointsStep"]
maxentStep <- df[, "maxentStep"]
dispersalStep <- df[, "dispersalStep"]
UrbanAnalysis <- df[, "UrbanAnalysis"]
ProtectedAnalysis <- df[, "ProtectedAnalysis"]
RichnessStep <- df[, "RichnessStep"]
#Loads variables for data directories
buff_dir <- df[, "buff_dir"]
samples <- "samples"
train <- df[, "trainingarea"]
projtrain <- df[, "proj_trainingarea"]
if (projtrain == "NA") {
projtrain <- train
}
sa <- df[, "studyarea"]
projsa <- df[, "proj_studyarea"]
if (projsa == "NA") {
projsa <- sa
}
if (df[, "numScenario"] > 0) {
projpredictenv <- df[, "proj_predictenv"]
predictenv <- df[, "predictenv"]
}
if (ProtectedAnalysis == "Y") {
protected_dir <- df[, "protected_dir"]
proj_protected_dir <- df[, "proj_protected_dir"]
}
if (UrbanAnalysis == "Y") {
urbanized_dir <- df[, "urbanized_dir"]
proj_urbanized_dir <- df[, "proj_urbanized_dir"]
}
rastertype <- df[, "rastertype"]
}
source("format.R")
{
#Set the working directory by navigating to and clicking on this file (or any other script file in the same directory)
setwd(dirname(file.choose()))
#If directory does not have "format.R" in it, print an error
if (length(grep("format.R", list.files(getwd()))) == 0) {
stop("File 'format.R' not found in the selected location. Rerun, ensuring that the selected file is within the scripts folder")
}
#Reads and formats the "config.txt" file (creates "df" dataframe)
source("format.R")
#Loads the necessary variables from "df"
scripts <- df[, "scripts"]
test <- df[, "test"]
occurrences <- df[, "occurrences"]
result_dir <- df[, "result_dir"]
#Loads variables for Y/N steps
ClipEnvDataStep <- df[, "ClipEnvDataStep"]
CoordinateProjectionStep <- df[, "CoordinateProjectionStep"]
gbifstep <- df[, "gbifstep"]
OccurEnvFeaturesStep <- df[, "OccurEnvFeaturesStep"]
subsampleVarelaStep <- df[, "subsampleVarelaStep"]
speciesBufferStep <- df[, "speciesBufferStep"]
backgroundPointsStep <- df[, "backgroundPointsStep"]
maxentStep <- df[, "maxentStep"]
dispersalStep <- df[, "dispersalStep"]
UrbanAnalysis <- df[, "UrbanAnalysis"]
ProtectedAnalysis <- df[, "ProtectedAnalysis"]
RichnessStep <- df[, "RichnessStep"]
#Loads variables for data directories
buff_dir <- df[, "buff_dir"]
samples <- "samples"
train <- df[, "trainingarea"]
projtrain <- df[, "proj_trainingarea"]
if (projtrain == "NA") {
projtrain <- train
}
sa <- df[, "studyarea"]
projsa <- df[, "proj_studyarea"]
if (projsa == "NA") {
projsa <- sa
}
if (df[, "numScenario"] > 0) {
projpredictenv <- df[, "proj_predictenv"]
predictenv <- df[, "predictenv"]
}
if (ProtectedAnalysis == "Y") {
protected_dir <- df[, "protected_dir"]
proj_protected_dir <- df[, "proj_protected_dir"]
}
if (UrbanAnalysis == "Y") {
urbanized_dir <- df[, "urbanized_dir"]
proj_urbanized_dir <- df[, "proj_urbanized_dir"]
}
rastertype <- df[, "rastertype"]
}
{
#Set the working directory by navigating to and clicking on this file (or any other script file in the same directory)
setwd(dirname(file.choose()))
#If directory does not have "format.R" in it, print an error
if (length(grep("format.R", list.files(getwd()))) == 0) {
stop("File 'format.R' not found in the selected location. Rerun, ensuring that the selected file is within the scripts folder")
}
#Reads and formats the "config.txt" file (creates "df" dataframe)
source("format.R")
#Loads the necessary variables from "df"
scripts <- df[, "scripts"]
test <- df[, "test"]
occurrences <- df[, "occurrences"]
result_dir <- df[, "result_dir"]
#Loads variables for Y/N steps
ClipEnvDataStep <- df[, "ClipEnvDataStep"]
CoordinateProjectionStep <- df[, "CoordinateProjectionStep"]
gbifstep <- df[, "gbifstep"]
OccurEnvFeaturesStep <- df[, "OccurEnvFeaturesStep"]
subsampleVarelaStep <- df[, "subsampleVarelaStep"]
speciesBufferStep <- df[, "speciesBufferStep"]
backgroundPointsStep <- df[, "backgroundPointsStep"]
maxentStep <- df[, "maxentStep"]
dispersalStep <- df[, "dispersalStep"]
UrbanAnalysis <- df[, "UrbanAnalysis"]
ProtectedAnalysis <- df[, "ProtectedAnalysis"]
RichnessStep <- df[, "RichnessStep"]
#Loads variables for data directories
buff_dir <- df[, "buff_dir"]
samples <- "samples"
train <- df[, "trainingarea"]
projtrain <- df[, "proj_trainingarea"]
if (projtrain == "NA") {
projtrain <- train
}
sa <- df[, "studyarea"]
projsa <- df[, "proj_studyarea"]
if (projsa == "NA") {
projsa <- sa
}
if (df[, "numScenario"] > 0) {
projpredictenv <- df[, "proj_predictenv"]
predictenv <- df[, "predictenv"]
}
if (ProtectedAnalysis == "Y") {
protected_dir <- df[, "protected_dir"]
proj_protected_dir <- df[, "proj_protected_dir"]
}
if (UrbanAnalysis == "Y") {
urbanized_dir <- df[, "urbanized_dir"]
proj_urbanized_dir <- df[, "proj_urbanized_dir"]
}
rastertype <- df[, "rastertype"]
}
{
#Set the working directory by navigating to and clicking on this file (or any other script file in the same directory)
setwd(dirname(file.choose()))
#If directory does not have "format.R" in it, print an error
if (length(grep("format.R", list.files(getwd()))) == 0) {
stop("File 'format.R' not found in the selected location. Rerun, ensuring that the selected file is within the scripts folder")
}
#Reads and formats the "config.txt" file (creates "df" dataframe)
source("format.R")
#Loads the necessary variables from "df"
scripts <- df[, "scripts"]
test <- df[, "test"]
occurrences <- df[, "occurrences"]
result_dir <- df[, "result_dir"]
#Loads variables for Y/N steps
ClipEnvDataStep <- df[, "ClipEnvDataStep"]
CoordinateProjectionStep <- df[, "CoordinateProjectionStep"]
gbifstep <- df[, "gbifstep"]
OccurEnvFeaturesStep <- df[, "OccurEnvFeaturesStep"]
subsampleVarelaStep <- df[, "subsampleVarelaStep"]
speciesBufferStep <- df[, "speciesBufferStep"]
backgroundPointsStep <- df[, "backgroundPointsStep"]
maxentStep <- df[, "maxentStep"]
dispersalStep <- df[, "dispersalStep"]
UrbanAnalysis <- df[, "UrbanAnalysis"]
ProtectedAnalysis <- df[, "ProtectedAnalysis"]
RichnessStep <- df[, "RichnessStep"]
#Loads variables for data directories
buff_dir <- df[, "buff_dir"]
samples <- "samples"
train <- df[, "trainingarea"]
projtrain <- df[, "proj_trainingarea"]
if (projtrain == "NA") {
projtrain <- train
}
sa <- df[, "studyarea"]
projsa <- df[, "proj_studyarea"]
if (projsa == "NA") {
projsa <- sa
}
if (df[, "numScenario"] > 0) {
projpredictenv <- df[, "proj_predictenv"]
predictenv <- df[, "predictenv"]
}
if (ProtectedAnalysis == "Y") {
protected_dir <- df[, "protected_dir"]
proj_protected_dir <- df[, "proj_protected_dir"]
}
if (UrbanAnalysis == "Y") {
urbanized_dir <- df[, "urbanized_dir"]
proj_urbanized_dir <- df[, "proj_urbanized_dir"]
}
rastertype <- df[, "rastertype"]
}
